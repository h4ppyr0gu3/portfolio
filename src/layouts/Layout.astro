---
export interface Props {
	title: string;
}

const { title } = Astro.props;
const activeClasses = ["inline-block", "p-4", "border-b-2", "rounded-t-lg"]
const inactiveClasses = ["inline-block", "p-4", "border-b-2", "border-transparent", "rounded-t-lg", "hover:text-gray-600", "hover:border-gray-300", "dark:hover:text-gray-300", "dark:bg-gray-700"]
const url = Astro.url
const tilClasses = url.pathname.split("/")[1] === "til" ? activeClasses : inactiveClasses
const blogClasses = url.pathname.split("/")[1] === "blog" ? activeClasses : inactiveClasses
const homeClasses = url.pathname.split("/")[1] === "" ? activeClasses : inactiveClasses
---

<!DOCTYPE html>
<!-- <html lang="en" class="dark"> -->
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
    <div class="mb-4 border-b border-gray-200 dark:border-gray-700 flex justify-between">
      <div class="flex"></div>
      <ul class="flex flex-wrap -mb-px text-sm font-medium text-center justify-center" id="myTab" data-tabs-toggle="#myTabContent" role="tablist">
        <li class="mr-2" role="presentation">
          <a href="/" class:list={homeClasses} id="home">Home</a>
        </li>
        <li class="mr-2" role="presentation">
          <a href="/blog" class:list={blogClasses} id="blog">Blog</a>
        </li>
        <li class="mr-2" role="presentation">
          <a href="/til" class:list={tilClasses} id="til">TIL</a>
        </li>
      </ul>
      <div class="flex">
        <button id="theme-toggle" type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5">
          <svg id="theme-toggle-dark-icon" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
          <svg id="theme-toggle-light-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>
          <span class="sr-only">Toggle dark mode</span>
        </button>
      </div>
      <script>
        document.addEventListener("DOMContentLoaded", () => {
          document.getElementById("theme-toggle").addEventListener("click", () => {
            document.documentElement.classList.toggle("dark");
            document.getElementById("theme-toggle-dark-icon").classList.toggle("hidden")
            document.getElementById("theme-toggle-light-icon").classList.toggle("hidden")
          })
        })
      </script>
    </div>
		<slot />
	</body>
</html>
